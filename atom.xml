<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joe的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-26T15:30:58.255Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Joe Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年8月小程序开发要点</title>
    <link href="http://yoursite.com/2019/08/26/2019%E5%B9%B48%E6%9C%88%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/26/2019年8月小程序开发总结/</id>
    <published>2019-08-26T15:27:28.901Z</published>
    <updated>2019-08-26T15:30:58.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019年8月小程序开发要点总结"><a href="#2019年8月小程序开发要点总结" class="headerlink" title="2019年8月小程序开发要点总结"></a>2019年8月小程序开发要点总结</h1><p>标签（空格分隔）： 前端 总结 小程序</p><hr><h2 id="要点记录"><a href="#要点记录" class="headerlink" title="要点记录"></a>要点记录</h2><ol><li>性能：<br>现象：<br>之前在商详基础内容开发完成之后，明显能感觉到商详页加载过慢，尤其是加价面板，能够清晰地感知到图片的加载过程（图片三分之一三分之一的下载补全）。<br>后期加上视频功能之后，视频的加载也十分慢，而且容易出现卡顿（4G下）。<br>方法：<br>借助腾讯云文档，对图片和视频进行压缩<br>图片质量压缩：<a href="https://cloud.tencent.com/document/product/460/36544" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/460/36544</a><br>视频质量压缩：<a href="https://cloud.tencent.com/document/product/314/33747" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/314/33747</a><br>重要BUG修复:<br>修复商详页好评图片无法显示的BUG（之前为了性能使用了webp格式，webp格式在ios中无法解析,考虑过只在安卓使用webp，但是部分安卓机型也有不支持webp的情况）</li><li>小程序分享相关问题<br>表现：<br>出现过一个BUG，从商详页分享出去的的小程序，接受分享的人点开就无法回到首页（左上角返回icon）<br>原因：<br>左上角返回icon调用的方法是WX.navigationBack, 返回上一个页面 ，从分享点开的用户，页面栈此时只有商详页一个页面。<br>解决方法：<br>控制用户分享时，只分享首路径，同时带上相应参数。用户从分享进入小程序，进入index页面的onLoad生命周期钩子，监测到相应参数，再跳转到商详页。</li></ol><p>这个Bug在 拥有二级页面，需要分享 的小程序中应该都会出现。所以如果之后还有新的小程序项目，很有可能碰见相同问题，记录下来，之后遇到相似问题就方便许多。</p><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><hr><p>自定义导航栏几乎每个页面都会用到，关于导航栏在不同机型中的高度适配问题，前前后后也是修改了很多次。<br>目前主要自定义导航栏的使用场景主要包括四种（注：小程序右上角的胶囊无法取消显示）</p><ol><li>拥有多个tab用于切换（首页商品流）</li><li>包含一个自定义的返回icon (商详页)</li><li>包含一个自定义的返回icon，以及一个title图片 (模板页)</li><li>仅显示一个背景色 (profile)</li></ol><p>除了一个相关H5页面的展示，几乎每一个页面都会用到自定义导航栏。<br>自定义导航栏的出现频率实在是很高，相关高度适配工作也很繁琐，在团队开发的时候，也可能会因此编写重复的代码。<br>因此感觉把自定义导航栏抽出作为一个公用组件是很有必要的。</p><h4 id="方案和遇到的问题"><a href="#方案和遇到的问题" class="headerlink" title="方案和遇到的问题"></a>方案和遇到的问题</h4><hr><p>目前手机屏幕众多，像刘海屏，水滴屏，都会影响我们自定义导航栏距离顶部的距离。</p><ol><li><p>safeArea API(属于 wx.getSystemInfo, wx.getSystemInfoSync)<br>考虑过使用小程序的safeArea API 在竖屏正方向下的安全区域, 然而在实验后发现该API在我自己手机上就出现了问题。<br>小米8，刘海屏。 微信小程序safeArea API返回 的安全区域 的TOP(安全区域左上角纵坐标)竟然为 0<br>{<br>width:  393<br>right:  393<br>top:    0<br>left:   0<br>bottom: 818<br>height: 818<br>}<br>iphone X 中SafeArea bottom也是显示的和screenHeight，windowHeight一样高</p></li><li><p>wx.getMenuButtonBoundingClientRect() API<br>该API可以获取右上角胶囊的位置，借助该API也许可以完成导航栏高度的自适应<br>然而在浏览 微信开放社区之后，发现该API会经常性的出现bug，包括<br>Ios设备获取胶囊信息全部为0；真机和开发者工具数据不一致等等问题。<br>说明该API目前还是不可信的，如果导航栏的高度依赖该API，很可能样式会出现问题。</p></li><li><p>statusBarHeight API(属于 wx.getSystemInfo, wx.getSystemInfoSync)<br>wx.getSystemInfo, wx.getSystemInfoSync这两个API可以获取 系统状态栏的高度，<br>系统状态栏高度差异是不同机型导航栏高度差异的重要部分（***刘海屏的刘海也在状态栏里面），<br>微信小程序右上角的胶囊高度是固定的（34px），剩下的差异只在胶囊到状态栏底部的距离，以及胶囊底部到导航栏的底部的距离</p></li><li><p>目前发现好货中的适配方式<br>使用 getSystemInfo API 中 model，判断机型属于的大类别，为需要适配的元素动态添加相应的类名（xs,plus,normal），编写相应的css。<br>这种方式的一些问题包括（1）我们需要多次传递相应类名直到相应组件 (2) 各个页面都重复地编写了类似的代码，工作重复，不方便维护<br>（3）andorid 类型众多，很难做一个分类，去编写相应的样式，即使能做分类，在每个页面或相应组件 都编写一遍也不太可行。</p></li></ol><h4 id="打算"><a href="#打算" class="headerlink" title="打算"></a>打算</h4><p>目前打算借助 statusBarHeight 接口，去编写我们的通用的自定义导航栏组件。<br>最主要的原因是 状态栏高度内包含了刘海屏，水滴屏相应 的刘海，水滴的高度。</p><p>由于胶囊顶部到状态栏顶部还有差异，设计时，导航栏内容又往往要求和胶囊居中，所以可能同时也会用到 wx.getMenuButtonBoundingClientRect() API</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019年8月小程序开发要点总结&quot;&gt;&lt;a href=&quot;#2019年8月小程序开发要点总结&quot; class=&quot;headerlink&quot; title=&quot;2019年8月小程序开发要点总结&quot;&gt;&lt;/a&gt;2019年8月小程序开发要点总结&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： 前端 总
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019年7月总结</title>
    <link href="http://yoursite.com/2019/08/11/2019%E5%B9%B47%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/11/2019年7月总结/</id>
    <published>2019-08-10T17:22:52.506Z</published>
    <updated>2019-08-17T15:57:34.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019年7月总结"><a href="#2019年7月总结" class="headerlink" title="2019年7月总结"></a>2019年7月总结</h1><p>标签（空格分隔）： 前端 总结</p><hr><h3 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h3><hr><p>回过头来才发现自己已经半年没写博客了，自从开学之后，不是在面试，就是在看面经。等拿到offer之后，又一门心思扎在毕业设计上。<br>回想起来，因为毕业设计和前端还是不属于一个领域，所以那时候学的东西也忘得差不多了。<br>大数据，流计算，Apache Flink，还是属于大数据方向的。当时我还想着这也是留给自己的一个可以选择的方向，现在想起来就觉得其实还是自己想的太理想化了。前端这部分自己业务都还不熟悉，想要联合大数据的学习短时间给自己创造一个价值的提升，还是一个非常艰难的，成本高的，见效慢的事。<br>从头去学习大数据这一块，可能还是得我做前端业务这一块熟练了，再去衡量是否值得去重新学习一块领域。</p><h3 id="关于自己未来前端方向"><a href="#关于自己未来前端方向" class="headerlink" title="关于自己未来前端方向"></a>关于自己未来前端方向</h3><hr><p>7月份的时候读了这样一篇文章<br><a href="https://juejin.im/post/5d2d207b5188257aa971ee33" target="_blank" rel="noopener">精读《前端未来展望》</a><br>自己对前端的未来其实没有太深入的理解，但是从这些前端大牛的角度中，还是能窥探出一些东西的。</p><p>其实可视化这一块自己确实没有太深入的学习，svg也好，canvas也好。主要可能开始没有”项目驱动”。不过感觉自己和可视化还是挺有缘分的。<br>从在苏州实习，还在用RubyOnRails和JQuery的时候，那个时候就已经开始用Echarts去完成一些业务上的统计需求了，用可视化图表 显示订单数啊，显示交易金额啊。<br>到后来做微博热门话题实时监控的时候，也是用的Echarts去实时显示微博热门话题数据变化，不过这就更简单了，也不过就是一个柱状图或者是条形图。</p><p>回过头看这两次经历，实际上满足的需求很简单，就只是柱状图，条形图或者折线图，更何况只是调用一下Echarts的接口。要是这样就敢说自己了解可视化，就实在是太往自己脸上贴金了。</p><p>但不管怎么样，在自己前端业务熟练之后，总还要在一个未来的方面专精的，才能以此不断提升自己的竞争力。<br>我自己也开始为自己定制职业规划，以后也会慢慢往里面添加一些细节。</p><h3 id="7月都干了啥"><a href="#7月都干了啥" class="headerlink" title="7月都干了啥"></a>7月都干了啥</h3><hr><p>7月主要还是入职拼多多，一开始看React文档，后来接到小程序的任务。去看小程序的文档，然后就开始做小程序的业务。一个是已经上线的亲友内购，另一个还没上线，就不在博客里面写了。</p><h3 id="7月的思考-学习"><a href="#7月的思考-学习" class="headerlink" title="7月的思考 / 学习"></a>7月的思考 / 学习</h3><hr><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><hr><p>小程序还是相对React来说比较简单的，我上手小程序也很快。感觉小程序还是类似Vue, 模板语法什么的。<br>不过关于小程序还是有很多吐槽的。</p><ol><li>不支持computed属性<br>（注：官方实现了computed属性的小程序自定义组件扩展 behavior，但是需要小程序基础库版本 &gt;= 2.6.1 的环境。）<br>同时，小程序还不支持传入js语句（不能传入执行一个函数的返回结果）。<br>这就很难受了，我无法根据已经设计好的几个基础状态，进行一些计算，返回我们需要的一个新值/一个组合。<br>这种场景我总是会下意识的想使用computed属性，我感觉这也是使用computed的经典场景。</li></ol><p>但是在2.6.1之前用不了，很遗憾。然后我突然发现，一个新的可以实现类似功能的observer属性，我还在想我甚至可以借助这个属性，自己实现类似computed属性的功能。然而仔细一看才发现，observer属性也是2.6.1才支持，官方的computed属性也是借助它实现的。fine~</p><p>后来我传递的时候是给模板语法传递一个新对象{}，在里面写新属性，传递给它我们组件中data里的值。<br>注意，新对象的大括号要和mustcache 语法 中间留一个空格，不然不能正确的将其识别为一个对象。</p><ol start="2"><li>微信Web开发者工具<br>emmm….哎，自行感受吧，希望之后它会越来越好</li></ol><h3 id="业务场景总结-tabbar-列表页"><a href="#业务场景总结-tabbar-列表页" class="headerlink" title="业务场景总结(tabbar + 列表页)"></a>业务场景总结(tabbar + 列表页)</h3><hr><p>一个tabbar在加上一个列表页list，是一个经典的电商场景。<br>就这么一个经典的场景也有很多坑，之前百亿项目H5的同事也和我们分享过他们遇到的坑。我在做新项目的时候确实也遇到了许多相同的坑。<br>本来是只写这一部分的，写着写着又写了很多其它的总结，这一部分先留着，明天再写吧。<br>// 更新于2019/8/17<br>业务场景总结<br>tabbar＋长列表<br>一个滑动吸顶的tabbar加上一个长列表是电商中长常见的一个场景。</p><p>但是微信小程序中却不适合做吸顶。为什么？因为小程序中的胶囊是我们无法去做修改的，我们无法控制胶囊的样式(仅黑白两种颜色)，也不能控制胶囊的显示与否，它占据了小程序的右上角。<br>一定，想要做吸顶，tab栏右侧需要留出一定的距离给胶囊，但是这样在非吸顶状态下样式也是非常奇怪。<br>目前的一个设计方案就是放弃吸顶，直接让tab栏固定在头部，右侧留出空间给胶囊。</p><p>更早的一个设计方案是tabbar固定在胶囊的下方，胶囊这一行仅仅做一个颜色的填充，(可能左上角会有一个icon承担一些功能)。<br>这种’滑动固定’而非’固顶’，一个是造成了列表展示区的进一步缩小；另一方面，在快速滑动，scroll事件未触发，导致 tabbar上方颜色填充块还未显示出来时，肉眼可以看见列表的内容快速的向上划过去，会造成闪一下的视觉效果。</p><hr><p>– 写于2019.8.11<br>– 更新于2019/8/17</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019年7月总结&quot;&gt;&lt;a href=&quot;#2019年7月总结&quot; class=&quot;headerlink&quot; title=&quot;2019年7月总结&quot;&gt;&lt;/a&gt;2019年7月总结&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： 前端 总结&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;闲谈&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS基础知识点</title>
    <link href="http://yoursite.com/2019/02/18/CSS%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/02/18/CSS基础/</id>
    <published>2019-02-18T15:00:41.301Z</published>
    <updated>2019-02-18T15:01:44.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><hr><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li>CSS选择器与权重</li><li>CSS选择器是如何解析的</li><li>display,position 参数</li></ol><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="CSS选择器与权重"><a href="#CSS选择器与权重" class="headerlink" title="CSS选择器与权重"></a>CSS选择器与权重</h4><hr><p>CSS选择器有哪些？通常来讲，有id选择器，类（伪类）选择器，元素（伪元素）选择器，属性选择器，和其他。</p><p>他们的权重是如何计算的？<br>权重的大小排列为从 id选择器(A级) 到 类（伪类）选择器；属性选择器（B级） 到 元素（伪元素）选择器（C级）到 其他选择器（D级）。<br>也就是说哪怕有100个类选择器，它的权重依旧没有id选择器高。在id选择器 权重相同的情况下，比较类选择器，属性选择器的权重大小，也就是B级的大小。在类，属性，伪类选择器权重相同的情况下，比较元素选择器，依次往下，比较其他选择器。</p><p>除此以外</p><ol><li>！important优先级最高</li><li>内联样式比外部样式优先级高</li><li>相同权重的情况下后写的样式覆盖之前的</li></ol><h4 id="CSS选择器是如何解析的"><a href="#CSS选择器是如何解析的" class="headerlink" title="CSS选择器是如何解析的"></a>CSS选择器是如何解析的</h4><hr><p>css选择器是从右往左解析的，这是出于性能的考虑，如果从左往右解析，就需要记住大量的元素。从右往左的话，只需要从一个较小的集合往左依次验证。</p><h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><hr><p>盒模型其实是CSS学习的一个重要基础。<br>盒模型是页面渲染时，dom元素在页面上的布局模型。<br>一个盒子包括margin(左右)+border(左右)+padding(左右)+content。<br>在标准盒模型下我们对width进行设置，其实设置的是content的宽度。而标准盒模型也就是content-box。<br>而IE盒模型就是border-box，也就是说在这盒模型下设置width,其实设置的是border(左右)+padding(左右)+content的宽度。<br>我们想使用不同的盒模型可以使用box-sizing属性去设置。</p><h4 id="display参数-position参数"><a href="#display参数-position参数" class="headerlink" title="display参数/position参数"></a>display参数/position参数</h4><hr><p>display属性确定元素的显示类型<br>position属性确定元素的位置</p><h5 id="display参数"><a href="#display参数" class="headerlink" title="display参数"></a>display参数</h5><p><a href="https://juejin.im/entry/587c46cc1b69e6006bf1e715" target="_blank" rel="noopener">display属性</a><br>常见的display参数有block,inline,inline-block,none,list-item,table,table-cell,flex,grid等等。<br>将display设置为block,那么这个元素就会表现得像块级元素，这也是div等块级元素标签的默认值。默认会独占一行，宽度默认占满父级元素的百分之百。可以正常设置宽高。<br>display设置为inline,它用来设置行内元素属性。不会单独占一行，设置宽高无效，宽度高度由内容撑开。<br>display: inline-block。行内块级元素。可以让元素既可以像块级元素一样设置宽高，又不会独占一行，比如input输入框，就是inline-block。</p><p>display: none用来隐藏某个元素。经常会问到display:none和visibility:hidden的区别</p><p>display:list-item可以将元素作为列表显示，display:table和table-cell用于表布局。display:flex是一种很好用的布局，因为在移动端支持较好所以在移动端经常使用。display: grid，网格布局是更加新的一种布局方式。</p><p>display是页面布局的一个重要属性，我们做页面布局除了使用浮动以及绝对定位，使用display的一些布局（inline-block布局，table布局，flex布局，grid布局）是非常方便的。</p><h5 id="position参数"><a href="#position参数" class="headerlink" title="position参数"></a>position参数</h5><hr><p>常见position属性的参数有static,relative,absolute,fixed。还有可能会问到sticky。<br>static是默认值，它不会被特殊的定位。它是遵循标准文档流的。</p><p>relative会根据top,bottom,left,right,在自身原来的位置上，做相应的偏移。其他元素的位置不会受其影响。他也是遵循标准文档流，不会改变它原本在文档流的占位空间。</p><p>fixed会相对于可视区域/视窗来定位，也是通过top,bottom,left,right来具体定位。它脱离标准文档流，不影响标准文档流元素的布局。</p><p>absolute与fixed相类似，只不过它不是根据可视区域来定位，而是根据离自己最近的”positioned”的祖父元素来定位，如果没找到，则相对于body元素。”positioned”元素即position不为static的元素。absolute也是脱离标准文档流，不影响标准文档流元素的布局。但是如果没有设置top,bottom,left,right四个属性中的任意一个的话，它的表现就与relative相同，遵循标准文档流。</p><p>另：float也是脱离标准文档流，不影响标准文档流的布局，但是会影响文字流，也就是说虽然不影响其他元素的布局，但是文字会包裹或者说避开它，毕竟float设计出来就是用于这样的用途的。</p><p>作为前端学习者，我们也需要对position:sticky这样的属性有一些了解。它能很好的实现一个滑动固顶的一个效果。什么意思呢，就是现在我们点开我们的外卖APP，点击商家的商品详情页，商品列表上方有一个导航。平时它表现得和relative差不多，当我们像下滑动一段距离得时候，我们可以看见我们的导航栏黏在了上方，表现得像一个fixed得元素。目前该属性firefox和safari已经支持，chrome还未支持。</p><h4 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h4><hr><p>页面布局也是前端面试过程中常考的一个点。考察了你的基本功，同时考察了你对新的布局方式是否了解。<br>常见的两栏/三栏布局 我们可以使用</p><ol><li>float + margin</li><li>绝对定位</li><li>table布局</li><li>flex布局</li><li>grid布局</li></ol><p>注意在写float方式的三栏布局的时候我们需要将float:right的元素写在中间那个元素的前面。因为浮动元素尽量向上靠，如果right写在center的后面，center中的内容就会阻碍浮动元素，浮动元素就无法碰到容器的顶部。显示起来就不是我们想要的结果。<br>对于flex布局和grid布局，毫无疑问它们是以后的标准，我们肯定要学习它，更何况flex已经在移动端用的很多了。</p><h5 id="两栏-amp-三栏布局"><a href="#两栏-amp-三栏布局" class="headerlink" title="两栏&amp;三栏布局"></a>两栏&amp;三栏布局</h5><p>这里记录下自己写的两栏布局以及三栏布局的代码<br>因为观看原因，放到文章的最后</p><h5 id="圣杯-amp-双飞翼布局"><a href="#圣杯-amp-双飞翼布局" class="headerlink" title="圣杯&amp;双飞翼布局"></a>圣杯&amp;双飞翼布局</h5><p>圣杯双飞翼布局也是重要的考点。<br>有两位前辈写的很好，这里放出它们的链接。<br>一位总结了它们的起源以及一些区别<a href="https://www.zhihu.com/question/21504052" target="_blank" rel="noopener">圣杯双飞翼</a><br>一位带领我们去实现这两个布局<a href="https://theqwang.github.io/2016/01/08/%E6%B5%85%E6%9E%90%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/" target="_blank" rel="noopener">圣杯双飞翼</a><br>我自己代码也会放到最后</p><h4 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h4><hr><p>这里给出一位前辈的文章链接，写的很好，感谢前辈。<br><a href="https://juejin.im/post/5b876f86518825431079ddd6" target="_blank" rel="noopener">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a></p><h4 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h4><hr><p><a href="https://juejin.im/post/5b9a4477f265da0ad82bf921" target="_blank" rel="noopener">水平垂直居中</a></p><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><hr><p><a href="https://juejin.im/post/58e3a5a0a0bb9f0069fc16bb" target="_blank" rel="noopener">flex布局</a></p><p>两栏布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        .layout &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            min-height: 100px;</span><br><span class="line">            margin:20px 0;</span><br><span class="line">        &#125;</span><br><span class="line">        .layout div&#123;</span><br><span class="line">            min-height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .left &#123;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .main &#123;</span><br><span class="line">            background: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;section class=&quot;layout float&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .layout.float .left&#123;</span><br><span class="line">                width: 200px;</span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.float .main&#123;</span><br><span class="line">                margin-left: 200px;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">            asdasddddddddddddddddddddddddd</span><br><span class="line">            asdasddddddddddddddddddddddddd</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;section class=&quot;layout absolute&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .layout.absolute&#123;</span><br><span class="line">                position: relative;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .layout.absolute .left&#123;</span><br><span class="line">                position: absolute;</span><br><span class="line">                left: 0;</span><br><span class="line">                width: 200px;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.absolute .main&#123;</span><br><span class="line">                left: 200px;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">            asdasddddddddddddddddddddddddd</span><br><span class="line">            asdasddddddddddddddddddddddddd</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;layout flex&quot;&gt;</span><br><span class="line">            &lt;style&gt;</span><br><span class="line">                .layout.flex&#123;</span><br><span class="line">                    display: flex;</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">                .layout.flex .left&#123;</span><br><span class="line">                    width: 200px;</span><br><span class="line">                &#125;</span><br><span class="line">                .layout.flex .main&#123;</span><br><span class="line">                    flex: 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">                asdasddddddddddddddddddddddddd</span><br><span class="line">                asdasddddddddddddddddddddddddd</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;layout table&quot;&gt;</span><br><span class="line">            &lt;style&gt;</span><br><span class="line">                .layout.table&#123;</span><br><span class="line">                    display: table;</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">                .layout.table .left&#123;</span><br><span class="line">                    display: table-cell;</span><br><span class="line">                    width: 200px;</span><br><span class="line">                &#125;</span><br><span class="line">                .layout.table .main&#123;</span><br><span class="line">                    display: table-cell;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">                asdasddddddddddddddddddddddddd</span><br><span class="line">                asdasddddddddddddddddddddddddd</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;layout grid&quot;&gt;</span><br><span class="line">            &lt;style&gt;</span><br><span class="line">                .layout.grid&#123;</span><br><span class="line">                    display: grid;</span><br><span class="line">                    grid-template-rows: 100px;</span><br><span class="line">                    grid-template-columns: 200px auto;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;grid&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">                asdasddddddddddddddddddddddddd</span><br><span class="line">                asdasddddddddddddddddddddddddd</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>三栏布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">            *&#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout &#123;</span><br><span class="line">                margin-top: 20px;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout div&#123;</span><br><span class="line">                min-height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            .left &#123;</span><br><span class="line">                width: 300px;</span><br><span class="line">                background: red;</span><br><span class="line">            &#125;</span><br><span class="line">            .right &#123;</span><br><span class="line">                width: 300px;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">            .center&#123;</span><br><span class="line">                background: yellow;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;section class=&quot;layout float&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .layout.float .left &#123;</span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.float .right &#123;</span><br><span class="line">                float: right;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.float .center &#123;</span><br><span class="line">                margin-left: 300px;</span><br><span class="line">                margin-right: 300px;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">            浮动</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;layout absolute&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .layout.absolute &#123;</span><br><span class="line">                position: relative;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.absolute .left &#123;</span><br><span class="line">                position: absolute;</span><br><span class="line">                left: 0;</span><br><span class="line">                width: 300px;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.absolute .right &#123;</span><br><span class="line">                position: absolute;</span><br><span class="line">                right: 0;</span><br><span class="line">                width: 300px;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.absolute .center &#123;</span><br><span class="line">                position: absolute;</span><br><span class="line">                left: 300px;</span><br><span class="line">                right: 300px;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">            绝对定位</span><br><span class="line">            绝对定位</span><br><span class="line">            绝对定位</span><br><span class="line">            绝对定位</span><br><span class="line">            绝对定位</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;layout flex&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .layout.flex &#123;</span><br><span class="line">                display: flex;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.flex .left&#123;</span><br><span class="line">                width: 300px;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.flex .right&#123;</span><br><span class="line">                width: 300px;</span><br><span class="line">            &#125;</span><br><span class="line">            .layout.flex .center&#123;</span><br><span class="line">                flex: 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                flex</span><br><span class="line">                flex</span><br><span class="line">                flex</span><br><span class="line">                flex</span><br><span class="line">                flex</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;layout table&quot;&gt;</span><br><span class="line">            &lt;style&gt;</span><br><span class="line">                .layout.table &#123;</span><br><span class="line">                    display: table;</span><br><span class="line">                &#125;</span><br><span class="line">                .layout.table .left&#123;</span><br><span class="line">                    display: table-cell;</span><br><span class="line">                    width: 300px;</span><br><span class="line">                &#125;</span><br><span class="line">                .layout.table .right&#123;</span><br><span class="line">                    display: table-cell;</span><br><span class="line">                    width: 300px;</span><br><span class="line">                &#125;</span><br><span class="line">                .layout.table .center&#123;</span><br><span class="line">                    display: table-cell;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                    table</span><br><span class="line">                    table</span><br><span class="line">                    table</span><br><span class="line">                    table</span><br><span class="line">                    table</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;layout grid&quot;&gt;</span><br><span class="line">            &lt;style&gt;</span><br><span class="line">                .layout.grid &#123;</span><br><span class="line">                    display: grid;</span><br><span class="line">                    grid-template-rows: 100px;</span><br><span class="line">                    grid-template-columns: 300px auto 300px;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                    grid</span><br><span class="line">                    grid</span><br><span class="line">                    grid</span><br><span class="line">                    grid</span><br><span class="line">                    grid</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>圣杯双飞翼布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            /* *&#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            .header&#123;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">            .footer&#123;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">            .main&#123;</span><br><span class="line">                box-sizing: border-box;</span><br><span class="line">                width: 100%;</span><br><span class="line">                padding: 0 100px;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .main .content&#123;</span><br><span class="line">                float: left;</span><br><span class="line">                width: 100%;</span><br><span class="line">                background: yellow;</span><br><span class="line">                height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">            .main .left&#123;</span><br><span class="line">                float: left;</span><br><span class="line">                width: 100px;</span><br><span class="line">                background: gray;</span><br><span class="line">                height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">            .main .right&#123;</span><br><span class="line">                float: left;</span><br><span class="line">                width: 100px;</span><br><span class="line">                background: grey;</span><br><span class="line">                height: 100px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .main .left&#123;</span><br><span class="line">                margin-left: -100%;</span><br><span class="line">            &#125;</span><br><span class="line">            .main .right&#123;</span><br><span class="line">                margin-left: -100px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .main .left&#123;</span><br><span class="line">                position: relative;</span><br><span class="line">                left: -100px;</span><br><span class="line">                z-index: 99;</span><br><span class="line">            &#125;</span><br><span class="line">            .main .right&#123;</span><br><span class="line">                position: relative;</span><br><span class="line">                right: -100px;</span><br><span class="line">            &#125; */</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section style=&quot;margin-top:10px&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            *&#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            .header&#123;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">            .footer&#123;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background: blue;                </span><br><span class="line">            &#125;</span><br><span class="line">            .main&#123;</span><br><span class="line">                width: 100%;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            .content-wrapper&#123;</span><br><span class="line">                float: left;</span><br><span class="line">                width: 100%;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .content&#123;</span><br><span class="line">                background: yellow;</span><br><span class="line">                height: 100px;</span><br><span class="line">                margin-left: 100px;</span><br><span class="line">                margin-right: 100px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .left&#123;</span><br><span class="line">                float: left;</span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background: grey;</span><br><span class="line">                margin-left: -100%;</span><br><span class="line">            &#125;</span><br><span class="line">            .right&#123;</span><br><span class="line">                float: left;</span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line">                background: green;</span><br><span class="line">                margin-left: -100px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;content-wrapper&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;content&quot;&gt;1213132132232132123132123123132123132&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS基础&quot;&gt;&lt;a href=&quot;#CSS基础&quot; class=&quot;headerlink&quot; title=&quot;CSS基础&quot;&gt;&lt;/a&gt;CSS基础&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈XSS和CSRF</title>
    <link href="http://yoursite.com/2018/12/16/%E6%B5%85%E8%B0%88XSS%E5%92%8CCSRF/"/>
    <id>http://yoursite.com/2018/12/16/浅谈XSS和CSRF/</id>
    <published>2018-12-16T14:16:32.621Z</published>
    <updated>2018-12-16T14:17:03.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈XSS和CSRF"><a href="#浅谈XSS和CSRF" class="headerlink" title="浅谈XSS和CSRF"></a>浅谈XSS和CSRF</h1><hr><p>XSS和CSRF是前端比较常见的两种攻击方式，我们作为一个学习者，也需要对这两种攻击方式有所了解</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><hr><p>XSS，即跨域脚本攻击，全称Cross Site Scripting。<br>XSS主要分为两种类型。一种是反射型，一种是存储型。<br>比较经典的例子呢，就是评论区。<br>比如说某个站点没有对用户输入的内容进行过滤。那么我们就可以评论 像<code>&lt;script&gt;&lt;/script&gt;</code>这样的文本，中间插入我们攻击的脚本。当然我们也可以评论一个图片<code>&lt;img src=&#39;null&#39; onerror=&quot;这里插入我们攻击的脚本&quot;&gt;</code>。<br>这样所有访问这个页面（带有评论的页面）的用户，都会执行我们的攻击脚本。</p><h4 id="预防方式"><a href="#预防方式" class="headerlink" title="预防方式"></a>预防方式</h4><p>那么我们要怎么预防XSS攻击呢？<br>首先是对用户输入的内容进行转义，就是像单双引号，尖括号这样的内容进行转义。那么浏览器就不会对相应的脚本自动执行。<br>前端也可以进行反转义，并且过滤一些标签或者属性。像script标签，以及像src,onclick这些属性。<br>我们也可以使用CSP，即Content-Security-Policy,csp可以再HTTP Header种进行设置。我们可以限制比如说，只允许加载本站的资源，或者只允许进行访问HTTPs的图片。</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><hr><p>CSRF,即跨站请求伪造，全称Cross-Site-Request-forgery。<br>CSRF攻击是怎么实现的呢?<br>比如说我们访问了一个a站点，登录之后，a站点给我们设置了相应的cookie。这时我们不小心访问了一个攻击用的钓鱼网站，网站中一有一个img标签，它的src就是我们a站点的一个接口。那么我们就会访问这个接口，同时把cookie也发送出去。服务器端验证了cookie,就执行了相应的接口。</p><h4 id="预防方式-1"><a href="#预防方式-1" class="headerlink" title="预防方式"></a>预防方式</h4><p>CSRF要怎么预防呢？<br>一种是采用Token验证，就是说，我们网站对用户身份的验证不能光靠cookie.同时也会带有一个Token.如果站点验证Token不正确或者没有Token,那么就拒绝这次请求。<br>还有一种是referer验证，通过http中的referer头，验证http请求的来源，如果不是从本站发起的请求，那么就拒绝它。<br>其实除此之外还可以，通过每次调用接口，都要输入验证码这种方式，这里就不细讲了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅谈XSS和CSRF&quot;&gt;&lt;a href=&quot;#浅谈XSS和CSRF&quot; class=&quot;headerlink&quot; title=&quot;浅谈XSS和CSRF&quot;&gt;&lt;/a&gt;浅谈XSS和CSRF&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;XSS和CSRF是前端比较常见的两种攻击方式，我们作为一个学习者，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TLS握手过程</title>
    <link href="http://yoursite.com/2018/12/07/TLS%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/12/07/TLS握手过程/</id>
    <published>2018-12-07T07:16:21.302Z</published>
    <updated>2018-12-07T07:17:20.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TLS握手过程"><a href="#TLS握手过程" class="headerlink" title="TLS握手过程"></a>TLS握手过程</h1><hr><p>之前讲了HTTPS原理，那么这次讲一下TLS握手过程。</p><p>首先客户端向服务器端发送一个Client Hello，包括一个随机数，客户端支持的加密套件以及SSL版本号等信息。</p><p>服务器端收到Client Hello后，发送一个Server Hello消息，服务器端会同样生成一个随机数，同时服务器端会在客户端支持的加密套件中选择一个加密套件。同时服务器会发送他的数字证书。</p><p>客户端收到Server Hello之后，对证书进行验证。验证信息正确之后，会生成第三个随机数并使用服务器端的公钥加密，作为预主密钥。（双方使用这三个随机数和加密套件生成主密钥）并且告诉服务器端这边已经切换到之前商量好的加密套件，最后会发送一段Finish消息给服务器端</p><p>服务器端最后会有个回应告诉客户端，这边已经切换到之前商量好的加密套件，并发送一个Finish消息。</p><p>之后双方就可以使用主密钥正常的传输了。</p><p>当然还有一些False Start（抢跑）和 通过Session ID恢复连接，就不细讲了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TLS握手过程&quot;&gt;&lt;a href=&quot;#TLS握手过程&quot; class=&quot;headerlink&quot; title=&quot;TLS握手过程&quot;&gt;&lt;/a&gt;TLS握手过程&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;之前讲了HTTPS原理，那么这次讲一下TLS握手过程。&lt;/p&gt;
&lt;p&gt;首先客户端向服务器端
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTPS原理学习</title>
    <link href="http://yoursite.com/2018/12/06/HTTPS%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/12/06/HTTPS原理学习/</id>
    <published>2018-12-06T14:03:53.955Z</published>
    <updated>2018-12-06T14:04:22.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTPS原理学习"><a href="#HTTPS原理学习" class="headerlink" title="HTTPS原理学习"></a>HTTPS原理学习</h1><hr><p>因为HTTP是明文传输的，是不安全的，这才有了HTTPS。HTTPS是在TCP层上多了一个SSL/TLS层，也就是说HTTPS是在SSL/TLS层上的HTTP。</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><hr><p>那么HTTPS是怎样做到安全传输信息的呢，首先讲一下对称加密。既然HTTP是明文传输，我们很自然地就想到进行加密。加密和解密使用同一个密钥的加密方式就是对称加密。<br>那么对称加密有什么问题呢，当我们的攻击者拿到了这个密钥，那么我们的加密对于他来说就是透明的。<br>所以我们的非对称加密这时就有用了。</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><hr><p>那么什么是非对称加密，非对称加密是我们有一个公钥和私钥，它们为一对。公钥加密的信息只有私钥能解密。而私钥只保存在服务器，不向外传输。所以中间人即使拿到了信息和公钥，也没法对信息解密。</p><h3 id="非对称加密的问题"><a href="#非对称加密的问题" class="headerlink" title="非对称加密的问题"></a>非对称加密的问题</h3><hr><p>但是，非对称加密还有一个问题，就是服务器在传输公钥的时候，被中间人篡改，给替换成中间人自己的公钥。那么客户端以为这是服务器的公钥，就用这个公钥进行加密，而中间人则用他自己的私钥进行解密，还可以对解密后的信息使用真正服务器的公钥进行加密</p><h3 id="CA和证书"><a href="#CA和证书" class="headerlink" title="CA和证书"></a>CA和证书</h3><hr><p>那么我们就要解决非对称加密的公钥被篡改这个问题。HTTPS中使用了数字证书和数字签名去解决这个问题。我们需要到权威的CA去进行进行申请，CA验证通过了，就会将我们服务器这边的公钥和相关信息使用CA的私钥加密生成数字签名，数字证书中包括我们的公钥，信息以及数字签名。这样如果中间人篡改了公钥，我们在对数字签名进行解密之后，就会发现数据不匹配。当然中间人也可以把公钥，信息和数字签名都换成自己的，但是这样虽然信息匹配了，但是客户端即浏览器就会发现这不是我们想要访问的节点了。<br>还有一点就是CA的公钥一般是预置在浏览器的。不然这个问题就变成鸡生蛋，蛋生鸡的问题了。<br>正如那句话所说，“难的不是加密，而是密钥的保管。”</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><hr><p>希望这篇文章对你有帮助，可能有图会更好理解，以后我应该会去试着使用一些图床。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTPS原理学习&quot;&gt;&lt;a href=&quot;#HTTPS原理学习&quot; class=&quot;headerlink&quot; title=&quot;HTTPS原理学习&quot;&gt;&lt;/a&gt;HTTPS原理学习&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;因为HTTP是明文传输的，是不安全的，这才有了HTTPS。HTTPS是在T
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>再谈作用域</title>
    <link href="http://yoursite.com/2018/11/07/%E5%86%8D%E8%B0%88%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/11/07/再谈作用域/</id>
    <published>2018-11-06T17:11:55.917Z</published>
    <updated>2018-11-06T17:11:34.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再谈作用域"><a href="#再谈作用域" class="headerlink" title="再谈作用域"></a>再谈作用域</h1><hr><p>说实话，前一段时间，深入地读了一些前辈的文章之后，我对作用域链，执行上下文等一些概念确实有了一些深入的认识，但是我很不安，因为我确实无法理解作用域，也不能说完全不理解，是那种说不清，道不明，只可意会不可言传的感觉。它成了我心头的一根刺。晚上实在难受，还是想着看看别人的文章，文章看着看着突然就有了一种突然开窍的感觉。<br>在这里记录下自己的想法：</p><hr><p>###什么是作用域<br>作用域就是 变量，函数 可访问的范围。<br>很明显 这句话比之前的说法更好理解（对于理解后的自己来说）</p><p>嗯，还是用代码举具体例子 比如下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function turn (num) &#123;</span><br><span class="line">  var b = 2;</span><br><span class="line">  c = 3;</span><br><span class="line">  a //1</span><br><span class="line">  b //2</span><br><span class="line">  c //3</span><br><span class="line">&#125;</span><br><span class="line">a //1</span><br><span class="line">b //Uncaught ReferenceError: b is not defined</span><br><span class="line">    at &lt;anonymous&gt;:1:1</span><br><span class="line">c //3</span><br></pre></td></tr></table></figure></p><p>a是在程序最外层定义的，c没有声明直接赋值。<br>它们俩都有全局作用域，因此在整个程序内都可以访问</p><p>那b呢?它是在函数 turn里面定义的，它拥有函数作用域，也就是说在函数turn里面都可以访问到它<br>如果是闭包的情况呢，我们修改一下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function turn (num) &#123;</span><br><span class="line">  var b = 2;</span><br><span class="line">  c = 3;</span><br><span class="line">  a //1</span><br><span class="line">  b //2</span><br><span class="line">  c //3</span><br><span class="line">  function change () &#123;</span><br><span class="line">    var d = b * b; //4 (2 * 2)</span><br><span class="line">    return d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a //1</span><br><span class="line">b //Uncaught ReferenceError: b is not defined</span><br><span class="line">    at &lt;anonymous&gt;:1:1</span><br><span class="line">c //3</span><br></pre></td></tr></table></figure></p><p>change函数里面依旧是可以访问到b变量，因为change函数也在turn函数里面，在turn函数里面都可以访问b，这也说明了JS的作用域是词法作用域。</p><hr><h3 id="作用域和作用域链是什么关系"><a href="#作用域和作用域链是什么关系" class="headerlink" title="作用域和作用域链是什么关系"></a>作用域和作用域链是什么关系</h3><p>你想啊，我们知道这个变量的作用域（词法），JS引擎又不知道（应该是知道的，引入下一句话），那它要怎么知道呢?<br>比如代码运行到某个上下文中，它要怎么知道我可以不可以访问这个变量呢，<br>这个时候，他就要到作用域链中去查找。<br>我的看法是 作用域只是一种抽象的概念，内存中不会存储变量的作用范围，<br>（不然你想啊，如果要直接往变量的内存 存可以作用域的范围，全局变量的引用就几千个了吧，函数写了也可以不调用，所以这种直接存作用范围的方式是不行的）（记住，作用域没有直接的代码或者内存体现）<br>而作用域链机制 就是一种对 JS词法作用域的一种实现（规定上下文能访问的变量范围，从另一维度上看不就是规定了变量的可（被）访问范围吗）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;再谈作用域&quot;&gt;&lt;a href=&quot;#再谈作用域&quot; class=&quot;headerlink&quot; title=&quot;再谈作用域&quot;&gt;&lt;/a&gt;再谈作用域&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;说实话，前一段时间，深入地读了一些前辈的文章之后，我对作用域链，执行上下文等一些概念确实有了一些深入的认识
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>作用域， 上下文 和 变量的查找</title>
    <link href="http://yoursite.com/2018/11/01/%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%8C%20%E4%B8%8A%E4%B8%8B%E6%96%87%20%E5%92%8C%20%E5%8F%98%E9%87%8F%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2018/11/01/作用域， 上下文 和 变量的查找/</id>
    <published>2018-11-01T07:20:33.727Z</published>
    <updated>2018-11-06T17:17:54.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域，-上下文-和-变量的查找"><a href="#作用域，-上下文-和-变量的查找" class="headerlink" title="作用域， 上下文 和 变量的查找"></a>作用域， 上下文 和 变量的查找</h1><hr><p>之前一直以为自己理解作用域链和上下文了，知道后来去看了别人的博客，才发现自己理解的很肤浅。作为一个笔记写下自己的理解吧。<br>第一部分我会说一下 一个例子的执行过程，涉及到作用域链，上下文变量对象。<br>第二部分我会说一下和作用域，上下文有关的面试中可能会问到的题目，当然只是我自己目前的理解。</p><h3 id="一个例子的执行过程"><a href="#一个例子的执行过程" class="headerlink" title="一个例子的执行过程"></a>一个例子的执行过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var scope = &quot;global scope&quot;;</span><br><span class="line">function checkscope()&#123;</span><br><span class="line">    var scope = &quot;local scope&quot;;</span><br><span class="line">    function f()&#123;</span><br><span class="line">        return scope;</span><br><span class="line">    &#125;</span><br><span class="line">    return f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()();</span><br></pre></td></tr></table></figure><p>1.首先创建全局上下文，全局上下文压入 上下文执行栈。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//伪代码</span><br><span class="line">ECS.push(全局上下文globalContext)；</span><br><span class="line">即 ECS = [</span><br><span class="line">    globalConext</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>2.初始化全局上下文，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">全局上下文Gobalcontext = &#123;</span><br><span class="line">    变量对象VO : &#123;global全局对象&#125;,</span><br><span class="line">    作用域Scope :  [globalContext.VO],</span><br><span class="line">    this：globalContext.vo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>初始化全局上下文的同时，创建函数checkscope，为它分配内存的时侯，把作用域Scope赋值给checkscope函数的[[scope]]内部属性。</p><p>3.全局上下文执行可执行代码，执行到调用checkscope函数的时候。生成checkscope函数上下文，将checkscope函数上下文压入 上下文执行栈。<br>此时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECS = [</span><br><span class="line">globalContext;</span><br><span class="line">checkscope的Context;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>4.然后初始化checkscope函数上下文，包括，<br>  a. 先把之前赋值过的[[scope]]内部属性赋值给 作用域链scope<br>  b. 然后用arguments创建活动对象AO。<br>  c. 初始化活动对象AO，进行一些形参声明，变量声明，函数声明<br>  d. 将当前活动对象放到作用域链的前端<br>同时创建了函数f, 将当前作用域链scope赋值给他的[[scope]]属性<br>（之前我在想是初始化活动对象AO的时候函数f的[[scope]]属性赋值吗，不然怎么叫同时，但是后来我又想如果那个时候赋值，checkscope函数的活动对象还没放到作用域链的前端，那不就出问题了吗？再后来，我就觉得，他什么时候赋值不重要，因为给函数f[[scope]]属性的赋值应该是个‘引用(地址)赋值’，checkscope函数上下文的作用域链Scope应该也是各引用，所以就不重要了）</p><p>5.然后执行代码</p><p>6.然后 return了一个函数 ，checkscope函数上下文弹出 执行上下文栈</p><p>7.然后执行全局上下文的代码，发现进行了f函数的调用</p><p>8.然后生成f函数上下文，f函数上下文被推入 执行上下文栈</p><p>9.。。。然后就类似checkscope函数，。。。最后f函数上下文弹出上下文执行栈</p><p>10.最后全局上下文弹出上下文执行栈。</p><hr><h3 id="与作用域上下文相关的题目"><a href="#与作用域上下文相关的题目" class="headerlink" title="与作用域上下文相关的题目"></a>与作用域上下文相关的题目</h3><p>1.什么是作用域？<br>作用域是 变量，函数 可(被)访问的范围<br>js中使用的是词法作用域（静态作用域），也就是说作用域在函数定义的时候就已经确定了<br>2.引擎怎樣找到一個變量<br>js引擎在执行代码前会做一个准备工作，会创建上下文环境。<br>上下文有三个重要的属性，一个是变量对象VO，一个是作用域链，一个是this<br>js引擎维护了一个上下文执行栈， 我们从当前执行上下文出发，沿着当前上下文的作用域链不断向上查找，直到查到全局上下文为止。<br>3.作用域和上下文的區別<br>作用域在函数定义的时候就已经确定了，<br>上下文要在函数调用执行阶段才确定。</p><h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h3><p>我发现有时候想要深入了解一些原理，只靠一本书是不够的，还要翻阅多本书，多个文档。如果不好理解，还需要去看一下别人的博客，看看他们怎么理解。感谢前辈们的贡献</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/8" target="_blank" rel="noopener">JavaScript深入之执行上下文</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作用域，-上下文-和-变量的查找&quot;&gt;&lt;a href=&quot;#作用域，-上下文-和-变量的查找&quot; class=&quot;headerlink&quot; title=&quot;作用域， 上下文 和 变量的查找&quot;&gt;&lt;/a&gt;作用域， 上下文 和 变量的查找&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;之前一直以为自己理
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS中的面向对象，原型链和继承</title>
    <link href="http://yoursite.com/2018/10/31/JS%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/10/31/JS中的面向对象，原型链和继承/</id>
    <published>2018-10-31T07:06:04.192Z</published>
    <updated>2018-10-31T07:06:47.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS中的面向对象，原型链和继承"><a href="#JS中的面向对象，原型链和继承" class="headerlink" title="JS中的面向对象，原型链和继承"></a>JS中的面向对象，原型链和继承</h1><hr><h3 id="面向对象理解"><a href="#面向对象理解" class="headerlink" title="面向对象理解"></a>面向对象理解</h3><p>只是我自己目前的一些理解，以后也许会修改。<br>面向对象是一种抽象方式。把现实生活中的物体看作一个个‘对象’，这样我们在写实际应用的时候，就可以将现实生活中的 概念/模型 映射到计算机领域的数据结构。<br>具有类似属性一些物体我们就将它们归为一类，产生类的概念。<br>而被归为一类的物体中，里面还有一些物体它们也有相似的地方，还可以抽象成一个类，这样就形成父类和子类，也就引出了继承。</p><h3 id="JS中的面向对象"><a href="#JS中的面向对象" class="headerlink" title="JS中的面向对象"></a>JS中的面向对象</h3><p>JS在ES6之前没有class的机制，ES6之后实现了class，当然它的本质也是语法糖，封装起来还是不错的。不过，我们作为一个学习者，还是要学习JS封装和继承的实际实现。<br>我推荐大家还是读一读《JavaScript 高级程序设计》中的 “面向对象的程序设计”那一章，讲的还是不错的。<br>我会挑我觉得比较经典的谈谈我的看法。</p><h3 id="创建对象-封装"><a href="#创建对象-封装" class="headerlink" title="创建对象/封装"></a>创建对象/封装</h3><p>虽然ES6之前没有class,但是object本身就是js基本类型之一。<br>当然我们不可能每一次都用字面量或者Object()构造对象。所以我们引入了设计模式。像工厂模式，构造函数模式，原型模式，组合使用构造函数模式和原型模式，动态原型模式，寄生构造函数模式，稳妥构造模式。<br>我个人还是倾向组合使用构造函数和原型模式。不过在讲之前我们先来说一下构造函数和原型。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span> (<span class="params">id, balance = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="number">100</span>);  <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>像这样一个函数就是一个构造函数，它构造出来的对象 比如User1，检查 User1 instanceof User 返回为true。</p><p>使用new创建对象的过程是怎样的呢，这有时也会作为面试题被问到</p><ol><li>new 新建一个空的Object</li><li>将构造函数的作用域赋给新对象，改变this的指向</li><li>执行构造函数</li><li>返回修改后的对象</li></ol><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>你看，我们都打算将一部分具有类似属性和方法的对象抽象出来了，那些类似的属性和方法总不能还由那些对象自己放着吧，那样多浪费内存啊。我们得将类似的属性和方法放到一个地方，这些对象都能访问到，所以prototype（原型）就出场了。</p><p>prototype是每个函数都会有的属性，它指向一个Prototype对象，该原型对象也有一个constructor属性指向相应的函数。用构造函数构造出来的对象除了构造函数中添加的那些属性，还有一个[[prototype]]属性指向，构造函数的prototype。当我们查找一个对象的属性，比如在我们的user1中找一个叫name的属性，js引擎在user1对象上找不到呀，那怎么办呢？这时，js引擎就会到[[prototype]]指向的对象上找，如果找到了就返回，没找到呢？那就沿着这个原型的[[prototype]]继续往找，直到Object.prtotype为止。</p><p>所以我们就把一些相似的属性或者方法放在prototype，如下图。<br>那为什么下面只有一些方法放在prototype里面了。这就是组合使用构造函数和原型模式。<br>我们不能把相同的方法放构造函数里面，这已经说过了，因为浪费内存。<br>但是属性呢？你想啊，虽然你们都有name这个属性，如果都放prototype里面，那你们不都成一个名字了？（当然，你可以手动给新构造的函数赋值来屏蔽原型中同名的属性，也可以在构造函数中赋值来屏蔽原型中的同名属性，不过何必呢，）所以除了本来就是共享一个值的属性，属性的赋值还是得放在构造函数里。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span> (<span class="params">id, name, balance = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : User,</span><br><span class="line">    saveMoney: function (amount) &#123;</span><br><span class="line">        <span class="keyword">this</span>.money += amount;</span><br><span class="line">    &#125;,</span><br><span class="line">    withdrawMoney: <span class="function"><span class="keyword">function</span> (<span class="params">amount</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>JS主要通过原型链实现继承，其实如果理解了对象属性的查找就比较好理解原型链。就, 子类的prototype的[[prototype]]属性指向父类的prototype，就这样一直指指指，直到Object.prototype嘛。<br>J S高级程序设计中讲到的继承模式有许多，我认为比较经典的是组合继承和寄生组合是继承。<br>这里内容太多，不做细讲，推荐大家去看红宝书(再次安利)</p><p>放一下我的例子吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function User (id, name, balance = 0) &#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var User1 = new User(1, 100);</span><br><span class="line"></span><br><span class="line">User.prototype = &#123;</span><br><span class="line">    constructor : User,</span><br><span class="line">    saveMoney: function (amount) &#123;</span><br><span class="line">        this.money += amount;</span><br><span class="line">    &#125;,</span><br><span class="line">    withdrawMoney: function (amount) &#123;</span><br><span class="line">        this.money -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SuperUser (id, name, balance, vipTime) &#123;</span><br><span class="line">    User.call(this, id, name, balance);</span><br><span class="line">    this.vipTime = vipTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function F () &#123;&#125;</span><br><span class="line">F.prototype = User.prototype;</span><br><span class="line">SuperUser.prototype = new F();</span><br><span class="line">SuperUser.prototype.constructor = SuperUser;</span><br><span class="line">SuperUser.prototype.getDiscount = function () &#123;</span><br><span class="line">    console.log(&apos;get discount&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里子类的构造函数借用了父类的构造函数，<br>关于子类原型，先构造了一个空函数，然后将User.prototype 赋值给 F.prototype,然后将F函数创建的匿名对象赋值给子类的原型。因为子类的原型是由F函数构建的，所以constructor为F,我们不希望它这样，所以修正constructor属性，最后为子类的原型添上一些方法。</p><p>（这里只是对上面代码的说明，如果看不懂，或者有一些疑问比如为什么不直接将父类的Prototype赋给子类的prototype，还是推荐看红宝书，因为本人水平有限可能将的不是特别的好，而且真要说清楚，篇幅还蛮长的）</p><h3 id="继承函数的封装"><a href="#继承函数的封装" class="headerlink" title="继承函数的封装"></a>继承函数的封装</h3><p>红宝书中的寄生组合式继承 抽象出来的继承方法借用原型式中oject()函数，其实只是为了实现寄生组合式继承没必要再引入一个函数，用下面的函数也可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function inherits(Child, Parent) &#123;</span><br><span class="line">    function F() &#123;&#125;</span><br><span class="line">    F.prototype = Parent.prototype;</span><br><span class="line">    Child.prototype = new F();</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS中的面向对象，原型链和继承&quot;&gt;&lt;a href=&quot;#JS中的面向对象，原型链和继承&quot; class=&quot;headerlink&quot; title=&quot;JS中的面向对象，原型链和继承&quot;&gt;&lt;/a&gt;JS中的面向对象，原型链和继承&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;面向对象理解&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>$(document).ready()和window.onload()的区别</title>
    <link href="http://yoursite.com/2018/10/30/$(document).ready()%E5%92%8Cwindow.onload()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/10/30/$(document).ready()和window.onload()的区别/</id>
    <published>2018-10-30T08:09:25.818Z</published>
    <updated>2018-10-31T07:01:07.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="document-ready-和window-onload-的区别"><a href="#document-ready-和window-onload-的区别" class="headerlink" title="$(document).ready()和window.onload()的区别"></a>$(document).ready()和window.onload()的区别</h1><hr><h3 id="document-ready-和window-onload-的区别-1"><a href="#document-ready-和window-onload-的区别-1" class="headerlink" title="$(document).ready()和window.onload()的区别"></a>$(document).ready()和window.onload()的区别</h3><p>首先 <code>$(document).ready()</code> 是JQuery中的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">&#125;);</span><br><span class="line">jQuery(document).ready(function()&#123;</span><br><span class="line">&#125;);</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">&#125;);</span><br><span class="line">$(document).on(&apos;ready&apos;, function()&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这四种事件是一样的<br><code>$可以换成JQuery，document是默认对象，ready是默认事件，可以不写</code></p><p><code>$(document).ready()</code>在dom构建完成之后执行<br>而 <code>window.onload()</code>则在页面所有资源加载完成后执行<br><code>window.onload()</code>触发发生在<code>$(document).ready()</code>之后</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>这篇文章其实我也没写下什么又用的东西，可能是最近感觉自己好多东西不会，有些急了，还是要调整好心态呀 :)<br>anyway，还是可以参考下面的链接，写的还是不错的。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://stackoverflow.com/questions/8396407/jquery-what-are-differences-between-document-ready-and-window-load" target="_blank" rel="noopener">jQuery - What are differences between \$(document).ready and $(window).load? - Stack Overflow</a><br><a href="https://www.jianshu.com/p/6b0a95cdbc7a" target="_blank" rel="noopener">简述domready和onload事件的区别 - 简书</a><br><a href="https://blog.csdn.net/fuzhongmin05/article/details/73521769" target="_blank" rel="noopener">document.ready和window.onload的区别 - Hopefully Sky的博客 - CSDN博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;document-ready-和window-onload-的区别&quot;&gt;&lt;a href=&quot;#document-ready-和window-onload-的区别&quot; class=&quot;headerlink&quot; title=&quot;$(document).ready()和window
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谈谈 事件</title>
    <link href="http://yoursite.com/2018/10/24/%E8%B0%88%E8%B0%88%20%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/24/谈谈 事件/</id>
    <published>2018-10-24T06:07:10.540Z</published>
    <updated>2018-10-24T06:16:21.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈谈-事件"><a href="#谈谈-事件" class="headerlink" title="谈谈 事件"></a>谈谈 事件</h1><hr><p>最近在读红宝书，就是那本JavaScript高级程序设计。读到事件那一章，碰巧又看到一部分和事件有关的面试题，于是写下这篇文章当作自己的学习笔记。</p><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><hr><p>在没有阅读相关文章之前，我都一直以为一个元素的onclick就只是对应这个元素的点击事件。红宝书中提出的问题就是 当你单击了某个元素时，是否也点击了它的父元素呢？<br>当然，原文是用同心圆来做说明的。想象一张纸上有一组同心圆，当你把手放在圆心时，手指指向的不是一个圆，而是纸上所有的圆。<br>事件流描述的是从页面接受事件的顺序。<br>IE事件流是事件冒泡，即从最具体的元素，逐级向上传播。<br>NetScape提出的事件流是事件捕获，即从不太具体的元素到具体的元素。<br>而 DOM2级事件 规定的事件流包括三个阶段： 事件捕获阶段，处于目标阶段和事件冒泡阶段。</p><h3 id="事件代理，事件委托"><a href="#事件代理，事件委托" class="headerlink" title="事件代理，事件委托"></a>事件代理，事件委托</h3><hr><p>理解了事件流之后，其实就比较好理解事件代理。<br>什么是事件代理呢？举个例子，我们有一个5*5的table,我们要实现一个功能就是点击某个tablecell时，将里面的文本经过某些处理输出到控制台。如果不使用事件代理，那么我们很可能写一个循环，然后对每一个tablecell设置onclick。<br>这样当然可以，但是要知道添加到页面上的数据处理程序数量将直接影响到页面整体的性能。在循环里面为每个dom设置匿名函数显然是不可取的，这会消耗大量的内存。当然，你也可以提前写好一个通用的函数，再在循环中将函数绑定到相应的事件中。<br>但是多次dom访问操作也是极其消耗性能的，所以事件委托是一个较好的方案。<br>事件委托利用了事件冒泡，指定一个事件处理程序，就可以管理某一类型的所有事件。<br>比如之前的例子，我们就写一个通用的处理函数，然后让table去监听click事件，在table的事件监听器中处理函数。<br>而且使用事件委托之后，一旦你想要添加新的元素进去，它也能正常响应原先的事件。如果不用事件响应的话，添加dom之后，还得再次手动为这些dom添加事件处理程序。</p><h3 id="绑定事件的方式"><a href="#绑定事件的方式" class="headerlink" title="绑定事件的方式"></a>绑定事件的方式</h3><p>绑定事件有三种方式。<br>第一种是在html中进行事件绑定，即在html标签的onclick等等属性上绑定事件。这种方式会导致一个问题就是html代码和js代码紧密耦合，不利于维护。<br>第二种是 DOM0级事件处理程序，即在dom元素的expando属性上绑定。<br>如<br>    <code>var a = document.getElementById(&#39;app&#39;);    a.onclick = someFunction();</code><br>这种形式绑定事件不如DOM2级，因为容易导致事件相互覆盖。<br>第三种 是DOM2级事件处理程序,如<br><code>var btn = document.getElementById(&#39;myBtn&#39;);btn.addEventListener(&quot;click&quot;, function() {    alert(this.id);}, false);</code><br>最后一个参数建议尽量使用false，因为：<br>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。<br>同时，建议在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</p><h3 id="Some"><a href="#Some" class="headerlink" title="Some"></a>Some</h3><p><em>我们可以使用 event.preventDafault()方法阻止默认事件。如果想查看默认事件是否被阻止了，可以使用event.defaultPrevented属性查看。</em>如果需要阻止事件的传播，可以使用event.stopPropagation()方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;谈谈-事件&quot;&gt;&lt;a href=&quot;#谈谈-事件&quot; class=&quot;headerlink&quot; title=&quot;谈谈 事件&quot;&gt;&lt;/a&gt;谈谈 事件&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;最近在读红宝书，就是那本JavaScript高级程序设计。读到事件那一章，碰巧又看到一部分和事件有关的面试
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题</title>
    <link href="http://yoursite.com/2018/10/14/%E4%BB%8E%200.1%20+%200.2%20!==%200.3%20%E5%BC%80%E5%A7%8B%20%E8%B0%88%E8%B0%88JavaScript%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/14/从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题/</id>
    <published>2018-10-14T04:40:38.662Z</published>
    <updated>2018-10-14T04:52:55.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题"><a href="#从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题" class="headerlink" title="从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题"></a>从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题</h1><hr><p>还记得刚开始接触前端的时候，那时候第一次看到 0.1 + 0.2 !== 0.3 的时候还是比较惊讶的，但那时候的我一心只想学习一些新技术、新框架，只想快速上手，自动地把这些问题归为底层的问题，便抛之脑后了。等到再一次碰到类似的问题，已经是几个月后了。<br><br></p><h2 id="Number的存储"><a href="#Number的存储" class="headerlink" title="Number的存储"></a>Number的存储</h2><hr><p>在讨论为什么 0.1 + 0.2 !== 0.3 之前，我们先来看看数字在JS中是怎么存储的吧。<br>我们都知道在JS中数字只有一种数据类型就是 Number， 而 Number 实际上是一种双精度浮点数的数据类型，遵循<a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank" rel="noopener">(IEEE - 754)</a>标准 ，用64bit进行存储。<br><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload.wikimedia.org/wikipedia/commons/7/76/General_double_precision_float.png" alt="双精度浮点数存储格式" title="">                </div>                <div class="image-caption">双精度浮点数存储格式</div>            </figure></p><p>从左往右依次为<br>sign bit(符号): 用来表示正负号</p><p>exponent(指数): 用来表示次方数</p><p>mantissa(尾数): 用来表示精确度</p><hr><p>在我不了解它的数字表示之前，我考虑的是mantissa表示尾数，那么小数点应该存放在哪里，怎么存放？<br>后来，我才明白，小数点不用存，你可以把它看成小数点在尾数mantissa的最左边，即52bit和51bit之间，为什么会这样呢？</p><blockquote><p>事实上，为了最大限度提高精确度，可以要求尾数规格化，把尾数处理到大于等于1而小于2的区间内，便可省去前述的“1”</p></blockquote><p>相当于尾数mantissa部分左侧多了一个“1.”还不用占用空间。<br>比如尾数mantissa中存了52个1<br>那么尾数mantissa实际表示的值（二进制）即为1.11…111(小数点后52个1)<br>$$ mantissa = 1.11…111 $$<br>转换成十进制即<br>$$ mantissa = 1+ (1/2)^1 + (1/2)^2 + … + (1/2)^{51} + (1/2)^{52}  $$</p><p>与此同时，我们正常理解指数部分应该为<br>$$ 2^{exponent} $$<br>exponent即为62bit到52位的正常二进制表示<br>但实际上我们的exponent 还有一个片偏移量<br>所以指数部分实际表示的值还要减去0x3ff<br>那么指数部分实际表示的值为<br>$$ 2^{exponent-0x3ff} $$</p><p><strong>那么这64bit实际表示的数字为</strong><br>$$ (-1)^{sign} \times 1.mantissa \times 2^{exponent-0x3ff} $$<br><br></p><h2 id="回到-0-1-0-2"><a href="#回到-0-1-0-2" class="headerlink" title="回到 0.1 + 0.2"></a>回到 0.1 + 0.2</h2><hr><p>那么回到 0.1 + 0.2 这个问题上，我们看看0.1和0.2实际存储情况是怎么样的。<br>我们先看0.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0.1 * 2 = 0.2    //0</span><br><span class="line">0.2 * 2 = 0.4    //0</span><br><span class="line">0.4 * 2 = 0.8    //0</span><br><span class="line">0.8 * 2 = 1.6    //1</span><br><span class="line">0.6 * 2 = 1.2    //1</span><br><span class="line">0.2 * 2 = 0.4    //0</span><br><span class="line">0.4 * 2 = 0.8    //0</span><br><span class="line">0.8 * 2 = 1.6    //1</span><br><span class="line">0.6 * 2 = 1.2    //1</span><br><span class="line">0.2 * 2 = 0.4    //0</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure></p><p>你可以看到它是乘不完的，0011这四个数在循环，即0.1转换成二进制是无限循环的。<br>但是要知道，我们的尾数部分只有52位，多的部分只能截掉。<br>也就是说十进制的0.1在存储为双精度浮点数的时候会造成精度丢失。</p><p><strong>而精度丢失丢失正是我们今天这个问题的原因所在</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 0.1 的存储形式</span><br><span class="line">0.00011001100110011001100110011001100110011001100110011010 </span><br><span class="line">// 0.2 的存储形式</span><br><span class="line">0.0011001100110011001100110011001100110011001100110011010 </span><br><span class="line">// 二进制相加的结果</span><br><span class="line">0.0100110011001100110011001100110011001100110011001100111</span><br><span class="line">// 转成十进制正好是 0.30000000000000004</span><br></pre></td></tr></table></figure></p><p><br></p><h2 id="其他语言的通病"><a href="#其他语言的通病" class="headerlink" title="其他语言的通病"></a>其他语言的通病</h2><hr><p>事实上，这不是JS才有的问题，毕竟Number类型是按照IEEE - 754标准的双精度浮点数实现的，这个问题在所有按照标准实现的语言中都有可能出现。</p><p>在我前一段时间写的项目中，我发现表格中一个金额显示为“30635.839999999997”，想了一会觉得应该是JavaScipt中Number丢失精度的问题。后来查看日志发现不是，而是Rails后端接口传过来的数据就是“30635.839999999997”，在后端进行double类型相加运算的时候，就已经出现了问题。<br>起码这已经能证明这个问题不是JavaScript的原因。</p><h2 id="解决问题案例"><a href="#解决问题案例" class="headerlink" title="解决问题案例"></a>解决问题案例</h2><hr><p>正如上面提到的那样，我之前的一个项目中，发现表格中一个金额显示为“30635.839999999997”，这个显示数据肯定不行的。发现之后，我一开始打算直接粗暴地给表格所有数据加上toFixed(2)完事，这样的修改是最不用动脑子的。<br>但是这样是行不通的，一个是我想要整数和一位小数只显示他们原来的样子。比如“500”就显示成“500”而不是”500.00”。另外toFixed()方法本身也有问题，不能正常地进行四舍五入。</p><p>这里我使用了他人的一个方法(链接位于文末)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数据展示类</span><br><span class="line">当你拿到 1.4000000000000001 这样的数据要展示时，建议使用 toPrecision 凑整并 parseFloat 转成数字后再显示，如下：</span><br><span class="line"></span><br><span class="line">parseFloat(1.4000000000000001.toPrecision(12)) === 1.4  // True</span><br><span class="line">封装成方法就是：</span><br><span class="line"></span><br><span class="line">function strip(num, precision = 12) &#123;</span><br><span class="line">  return +parseFloat(num.toPrecision(precision));</span><br><span class="line">&#125;</span><br><span class="line">为什么选择 12 做为默认精度？这是一个经验的选择，一般选12就能解决掉大部分0001和0009问题，而且大部分情况下也够用了，如果你需要更精确可以调高。</span><br></pre></td></tr></table></figure></p><p>我在js需要处理相关数据的地方中调用这个函数，大体是能解决这个问题的。</p><p>当然工作中碰到精度问题的情景不可能只有这一个，如果需要专业的解决方法，我们可以使用mathjs。</p><p>不管怎么样，理解了0.1 + 0.2 !== 0.3的原因，起码以后遇到类似问题，就能快速定位到原因所在。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><hr><p><a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8" target="_blank" rel="noopener">双精度浮点数 - 维基百科，自由的百科全书</a><br><a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener">JavaScript 浮点数陷阱及解法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题&quot;&gt;&lt;a href=&quot;#从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题&quot; class=&quot;headerlink&quot; title=&quot;从 0.1 + 0.2 !== 0.3 开始 谈谈J
      
    
    </summary>
    
    
  </entry>
  
</feed>
