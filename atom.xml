<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joe的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-06T17:11:34.392Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Joe Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再谈作用域</title>
    <link href="http://yoursite.com/2018/11/07/%E5%86%8D%E8%B0%88%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/11/07/再谈作用域/</id>
    <published>2018-11-06T17:11:55.917Z</published>
    <updated>2018-11-06T17:11:34.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再谈作用域"><a href="#再谈作用域" class="headerlink" title="再谈作用域"></a>再谈作用域</h1><hr><p>说实话，前一段时间，深入地读了一些前辈的文章之后，我对作用域链，执行上下文等一些概念确实有了一些深入的认识，但是我很不安，因为我确实无法理解作用域，也不能说完全不理解，是那种说不清，道不明，只可意会不可言传的感觉。它成了我心头的一根刺。晚上实在难受，还是想着看看别人的文章，文章看着看着突然就有了一种突然开窍的感觉。<br>在这里记录下自己的想法：</p><hr><p>###什么是作用域<br>作用域就是 变量，函数 可访问的范围。<br>很明显 这句话比之前的说法更好理解（对于理解后的自己来说）</p><p>嗯，还是用代码举具体例子 比如下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function turn (num) &#123;</span><br><span class="line">  var b = 2;</span><br><span class="line">  c = 3;</span><br><span class="line">  a //1</span><br><span class="line">  b //2</span><br><span class="line">  c //3</span><br><span class="line">&#125;</span><br><span class="line">a //1</span><br><span class="line">b //Uncaught ReferenceError: b is not defined</span><br><span class="line">    at &lt;anonymous&gt;:1:1</span><br><span class="line">c //3</span><br></pre></td></tr></table></figure></p><p>a是在程序最外层定义的，c没有声明直接赋值。<br>它们俩都有全局作用域，因此在整个程序内都可以访问</p><p>那b呢?它是在函数 turn里面定义的，它拥有函数作用域，也就是说在函数turn里面都可以访问到它<br>如果是闭包的情况呢，我们修改一下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function turn (num) &#123;</span><br><span class="line">  var b = 2;</span><br><span class="line">  c = 3;</span><br><span class="line">  a //1</span><br><span class="line">  b //2</span><br><span class="line">  c //3</span><br><span class="line">  function change () &#123;</span><br><span class="line">    var d = b * b; //4 (2 * 2)</span><br><span class="line">    return d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a //1</span><br><span class="line">b //Uncaught ReferenceError: b is not defined</span><br><span class="line">    at &lt;anonymous&gt;:1:1</span><br><span class="line">c //3</span><br></pre></td></tr></table></figure></p><p>change函数里面依旧是可以访问到b变量，因为change函数也在turn函数里面，在turn函数里面都可以访问b，这也说明了JS的作用域是词法作用域。</p><hr><h3 id="作用域和作用域链是什么关系"><a href="#作用域和作用域链是什么关系" class="headerlink" title="作用域和作用域链是什么关系"></a>作用域和作用域链是什么关系</h3><p>你想啊，我们知道这个变量的作用域（词法），JS引擎又不知道（应该是知道的，引入下一句话），那它要怎么知道呢?<br>比如代码运行到某个上下文中，它要怎么知道我可以不可以访问这个变量呢，<br>这个时候，他就要到作用域链中去查找。<br>我的看法是 作用域只是一种抽象的概念，内存中不会存储变量的作用范围，<br>（不然你想啊，如果要直接往变量的内存 存可以作用域的范围，全局变量的引用就几千个了吧，函数写了也可以不调用，所以这种直接存作用范围的方式是不行的）（记住，作用域没有直接的代码或者内存体现）<br>而作用域链机制 就是一种对 JS词法作用域的一种实现（规定上下文能访问的变量范围，从另一维度上看不就是规定了变量的可（被）访问范围吗）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;再谈作用域&quot;&gt;&lt;a href=&quot;#再谈作用域&quot; class=&quot;headerlink&quot; title=&quot;再谈作用域&quot;&gt;&lt;/a&gt;再谈作用域&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;说实话，前一段时间，深入地读了一些前辈的文章之后，我对作用域链，执行上下文等一些概念确实有了一些深入的认识
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>作用域， 上下文 和 变量的查找</title>
    <link href="http://yoursite.com/2018/11/01/%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%8C%20%E4%B8%8A%E4%B8%8B%E6%96%87%20%E5%92%8C%20%E5%8F%98%E9%87%8F%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2018/11/01/作用域， 上下文 和 变量的查找/</id>
    <published>2018-11-01T07:20:33.727Z</published>
    <updated>2018-11-06T17:17:54.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域，-上下文-和-变量的查找"><a href="#作用域，-上下文-和-变量的查找" class="headerlink" title="作用域， 上下文 和 变量的查找"></a>作用域， 上下文 和 变量的查找</h1><hr><p>之前一直以为自己理解作用域链和上下文了，知道后来去看了别人的博客，才发现自己理解的很肤浅。作为一个笔记写下自己的理解吧。<br>第一部分我会说一下 一个例子的执行过程，涉及到作用域链，上下文变量对象。<br>第二部分我会说一下和作用域，上下文有关的面试中可能会问到的题目，当然只是我自己目前的理解。</p><h3 id="一个例子的执行过程"><a href="#一个例子的执行过程" class="headerlink" title="一个例子的执行过程"></a>一个例子的执行过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var scope = &quot;global scope&quot;;</span><br><span class="line">function checkscope()&#123;</span><br><span class="line">    var scope = &quot;local scope&quot;;</span><br><span class="line">    function f()&#123;</span><br><span class="line">        return scope;</span><br><span class="line">    &#125;</span><br><span class="line">    return f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()();</span><br></pre></td></tr></table></figure><p>1.首先创建全局上下文，全局上下文压入 上下文执行栈。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//伪代码</span><br><span class="line">ECS.push(全局上下文globalContext)；</span><br><span class="line">即 ECS = [</span><br><span class="line">    globalConext</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>2.初始化全局上下文，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">全局上下文Gobalcontext = &#123;</span><br><span class="line">    变量对象VO : &#123;global全局对象&#125;,</span><br><span class="line">    作用域Scope :  [globalContext.VO],</span><br><span class="line">    this：globalContext.vo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>初始化全局上下文的同时，创建函数checkscope，为它分配内存的时侯，把作用域Scope赋值给checkscope函数的[[scope]]内部属性。</p><p>3.全局上下文执行可执行代码，执行到调用checkscope函数的时候。生成checkscope函数上下文，将checkscope函数上下文压入 上下文执行栈。<br>此时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECS = [</span><br><span class="line">globalContext;</span><br><span class="line">checkscope的Context;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>4.然后初始化checkscope函数上下文，包括，<br>  a. 先把之前赋值过的[[scope]]内部属性赋值给 作用域链scope<br>  b. 然后用arguments创建活动对象AO。<br>  c. 初始化活动对象AO，进行一些形参声明，变量声明，函数声明<br>  d. 将当前活动对象放到作用域链的前端<br>同时创建了函数f, 将当前作用域链scope赋值给他的[[scope]]属性<br>（之前我在想是初始化活动对象AO的时候函数f的[[scope]]属性赋值吗，不然怎么叫同时，但是后来我又想如果那个时候赋值，checkscope函数的活动对象还没放到作用域链的前端，那不就出问题了吗？再后来，我就觉得，他什么时候赋值不重要，因为给函数f[[scope]]属性的赋值应该是个‘引用(地址)赋值’，checkscope函数上下文的作用域链Scope应该也是各引用，所以就不重要了）</p><p>5.然后执行代码</p><p>6.然后 return了一个函数 ，checkscope函数上下文弹出 执行上下文栈</p><p>7.然后执行全局上下文的代码，发现进行了f函数的调用</p><p>8.然后生成f函数上下文，f函数上下文被推入 执行上下文栈</p><p>9.。。。然后就类似checkscope函数，。。。最后f函数上下文弹出上下文执行栈</p><p>10.最后全局上下文弹出上下文执行栈。</p><hr><h3 id="与作用域上下文相关的题目"><a href="#与作用域上下文相关的题目" class="headerlink" title="与作用域上下文相关的题目"></a>与作用域上下文相关的题目</h3><p>1.什么是作用域？<br>作用域是 变量，函数 可(被)访问的范围<br>js中使用的是词法作用域（静态作用域），也就是说作用域在函数定义的时候就已经确定了<br>2.引擎怎樣找到一個變量<br>js引擎在执行代码前会做一个准备工作，会创建上下文环境。<br>上下文有三个重要的属性，一个是变量对象VO，一个是作用域链，一个是this<br>js引擎维护了一个上下文执行栈， 我们从当前执行上下文出发，沿着当前上下文的作用域链不断向上查找，直到查到全局上下文为止。<br>3.作用域和上下文的區別<br>作用域在函数定义的时候就已经确定了，<br>上下文要在函数调用执行阶段才确定。</p><h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h3><p>我发现有时候想要深入了解一些原理，只靠一本书是不够的，还要翻阅多本书，多个文档。如果不好理解，还需要去看一下别人的博客，看看他们怎么理解。感谢前辈们的贡献</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/8" target="_blank" rel="noopener">JavaScript深入之执行上下文</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作用域，-上下文-和-变量的查找&quot;&gt;&lt;a href=&quot;#作用域，-上下文-和-变量的查找&quot; class=&quot;headerlink&quot; title=&quot;作用域， 上下文 和 变量的查找&quot;&gt;&lt;/a&gt;作用域， 上下文 和 变量的查找&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;之前一直以为自己理
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS中的面向对象，原型链和继承</title>
    <link href="http://yoursite.com/2018/10/31/JS%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/10/31/JS中的面向对象，原型链和继承/</id>
    <published>2018-10-31T07:06:04.192Z</published>
    <updated>2018-10-31T07:06:47.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS中的面向对象，原型链和继承"><a href="#JS中的面向对象，原型链和继承" class="headerlink" title="JS中的面向对象，原型链和继承"></a>JS中的面向对象，原型链和继承</h1><hr><h3 id="面向对象理解"><a href="#面向对象理解" class="headerlink" title="面向对象理解"></a>面向对象理解</h3><p>只是我自己目前的一些理解，以后也许会修改。<br>面向对象是一种抽象方式。把现实生活中的物体看作一个个‘对象’，这样我们在写实际应用的时候，就可以将现实生活中的 概念/模型 映射到计算机领域的数据结构。<br>具有类似属性一些物体我们就将它们归为一类，产生类的概念。<br>而被归为一类的物体中，里面还有一些物体它们也有相似的地方，还可以抽象成一个类，这样就形成父类和子类，也就引出了继承。</p><h3 id="JS中的面向对象"><a href="#JS中的面向对象" class="headerlink" title="JS中的面向对象"></a>JS中的面向对象</h3><p>JS在ES6之前没有class的机制，ES6之后实现了class，当然它的本质也是语法糖，封装起来还是不错的。不过，我们作为一个学习者，还是要学习JS封装和继承的实际实现。<br>我推荐大家还是读一读《JavaScript 高级程序设计》中的 “面向对象的程序设计”那一章，讲的还是不错的。<br>我会挑我觉得比较经典的谈谈我的看法。</p><h3 id="创建对象-封装"><a href="#创建对象-封装" class="headerlink" title="创建对象/封装"></a>创建对象/封装</h3><p>虽然ES6之前没有class,但是object本身就是js基本类型之一。<br>当然我们不可能每一次都用字面量或者Object()构造对象。所以我们引入了设计模式。像工厂模式，构造函数模式，原型模式，组合使用构造函数模式和原型模式，动态原型模式，寄生构造函数模式，稳妥构造模式。<br>我个人还是倾向组合使用构造函数和原型模式。不过在讲之前我们先来说一下构造函数和原型。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span> (<span class="params">id, balance = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="number">100</span>);  <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>像这样一个函数就是一个构造函数，它构造出来的对象 比如User1，检查 User1 instanceof User 返回为true。</p><p>使用new创建对象的过程是怎样的呢，这有时也会作为面试题被问到</p><ol><li>new 新建一个空的Object</li><li>将构造函数的作用域赋给新对象，改变this的指向</li><li>执行构造函数</li><li>返回修改后的对象</li></ol><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>你看，我们都打算将一部分具有类似属性和方法的对象抽象出来了，那些类似的属性和方法总不能还由那些对象自己放着吧，那样多浪费内存啊。我们得将类似的属性和方法放到一个地方，这些对象都能访问到，所以prototype（原型）就出场了。</p><p>prototype是每个函数都会有的属性，它指向一个Prototype对象，该原型对象也有一个constructor属性指向相应的函数。用构造函数构造出来的对象除了构造函数中添加的那些属性，还有一个[[prototype]]属性指向，构造函数的prototype。当我们查找一个对象的属性，比如在我们的user1中找一个叫name的属性，js引擎在user1对象上找不到呀，那怎么办呢？这时，js引擎就会到[[prototype]]指向的对象上找，如果找到了就返回，没找到呢？那就沿着这个原型的[[prototype]]继续往找，直到Object.prtotype为止。</p><p>所以我们就把一些相似的属性或者方法放在prototype，如下图。<br>那为什么下面只有一些方法放在prototype里面了。这就是组合使用构造函数和原型模式。<br>我们不能把相同的方法放构造函数里面，这已经说过了，因为浪费内存。<br>但是属性呢？你想啊，虽然你们都有name这个属性，如果都放prototype里面，那你们不都成一个名字了？（当然，你可以手动给新构造的函数赋值来屏蔽原型中同名的属性，也可以在构造函数中赋值来屏蔽原型中的同名属性，不过何必呢，）所以除了本来就是共享一个值的属性，属性的赋值还是得放在构造函数里。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span> (<span class="params">id, name, balance = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : User,</span><br><span class="line">    saveMoney: function (amount) &#123;</span><br><span class="line">        <span class="keyword">this</span>.money += amount;</span><br><span class="line">    &#125;,</span><br><span class="line">    withdrawMoney: <span class="function"><span class="keyword">function</span> (<span class="params">amount</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>JS主要通过原型链实现继承，其实如果理解了对象属性的查找就比较好理解原型链。就, 子类的prototype的[[prototype]]属性指向父类的prototype，就这样一直指指指，直到Object.prototype嘛。<br>J S高级程序设计中讲到的继承模式有许多，我认为比较经典的是组合继承和寄生组合是继承。<br>这里内容太多，不做细讲，推荐大家去看红宝书(再次安利)</p><p>放一下我的例子吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function User (id, name, balance = 0) &#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var User1 = new User(1, 100);</span><br><span class="line"></span><br><span class="line">User.prototype = &#123;</span><br><span class="line">    constructor : User,</span><br><span class="line">    saveMoney: function (amount) &#123;</span><br><span class="line">        this.money += amount;</span><br><span class="line">    &#125;,</span><br><span class="line">    withdrawMoney: function (amount) &#123;</span><br><span class="line">        this.money -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SuperUser (id, name, balance, vipTime) &#123;</span><br><span class="line">    User.call(this, id, name, balance);</span><br><span class="line">    this.vipTime = vipTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function F () &#123;&#125;</span><br><span class="line">F.prototype = User.prototype;</span><br><span class="line">SuperUser.prototype = new F();</span><br><span class="line">SuperUser.prototype.constructor = SuperUser;</span><br><span class="line">SuperUser.prototype.getDiscount = function () &#123;</span><br><span class="line">    console.log(&apos;get discount&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里子类的构造函数借用了父类的构造函数，<br>关于子类原型，先构造了一个空函数，然后将User.prototype 赋值给 F.prototype,然后将F函数创建的匿名对象赋值给子类的原型。因为子类的原型是由F函数构建的，所以constructor为F,我们不希望它这样，所以修正constructor属性，最后为子类的原型添上一些方法。</p><p>（这里只是对上面代码的说明，如果看不懂，或者有一些疑问比如为什么不直接将父类的Prototype赋给子类的prototype，还是推荐看红宝书，因为本人水平有限可能将的不是特别的好，而且真要说清楚，篇幅还蛮长的）</p><h3 id="继承函数的封装"><a href="#继承函数的封装" class="headerlink" title="继承函数的封装"></a>继承函数的封装</h3><p>红宝书中的寄生组合式继承 抽象出来的继承方法借用原型式中oject()函数，其实只是为了实现寄生组合式继承没必要再引入一个函数，用下面的函数也可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function inherits(Child, Parent) &#123;</span><br><span class="line">    function F() &#123;&#125;</span><br><span class="line">    F.prototype = Parent.prototype;</span><br><span class="line">    Child.prototype = new F();</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS中的面向对象，原型链和继承&quot;&gt;&lt;a href=&quot;#JS中的面向对象，原型链和继承&quot; class=&quot;headerlink&quot; title=&quot;JS中的面向对象，原型链和继承&quot;&gt;&lt;/a&gt;JS中的面向对象，原型链和继承&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;面向对象理解&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>$(document).ready()和window.onload()的区别</title>
    <link href="http://yoursite.com/2018/10/30/$(document).ready()%E5%92%8Cwindow.onload()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/10/30/$(document).ready()和window.onload()的区别/</id>
    <published>2018-10-30T08:09:25.818Z</published>
    <updated>2018-10-31T07:01:07.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="document-ready-和window-onload-的区别"><a href="#document-ready-和window-onload-的区别" class="headerlink" title="$(document).ready()和window.onload()的区别"></a>$(document).ready()和window.onload()的区别</h1><hr><h3 id="document-ready-和window-onload-的区别-1"><a href="#document-ready-和window-onload-的区别-1" class="headerlink" title="$(document).ready()和window.onload()的区别"></a>$(document).ready()和window.onload()的区别</h3><p>首先 <code>$(document).ready()</code> 是JQuery中的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">&#125;);</span><br><span class="line">jQuery(document).ready(function()&#123;</span><br><span class="line">&#125;);</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">&#125;);</span><br><span class="line">$(document).on(&apos;ready&apos;, function()&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这四种事件是一样的<br><code>$可以换成JQuery，document是默认对象，ready是默认事件，可以不写</code></p><p><code>$(document).ready()</code>在dom构建完成之后执行<br>而 <code>window.onload()</code>则在页面所有资源加载完成后执行<br><code>window.onload()</code>触发发生在<code>$(document).ready()</code>之后</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>这篇文章其实我也没写下什么又用的东西，可能是最近感觉自己好多东西不会，有些急了，还是要调整好心态呀 :)<br>anyway，还是可以参考下面的链接，写的还是不错的。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://stackoverflow.com/questions/8396407/jquery-what-are-differences-between-document-ready-and-window-load" target="_blank" rel="noopener">jQuery - What are differences between \$(document).ready and $(window).load? - Stack Overflow</a><br><a href="https://www.jianshu.com/p/6b0a95cdbc7a" target="_blank" rel="noopener">简述domready和onload事件的区别 - 简书</a><br><a href="https://blog.csdn.net/fuzhongmin05/article/details/73521769" target="_blank" rel="noopener">document.ready和window.onload的区别 - Hopefully Sky的博客 - CSDN博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;document-ready-和window-onload-的区别&quot;&gt;&lt;a href=&quot;#document-ready-和window-onload-的区别&quot; class=&quot;headerlink&quot; title=&quot;$(document).ready()和window
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谈谈 事件</title>
    <link href="http://yoursite.com/2018/10/24/%E8%B0%88%E8%B0%88%20%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/24/谈谈 事件/</id>
    <published>2018-10-24T06:07:10.540Z</published>
    <updated>2018-10-24T06:16:21.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈谈-事件"><a href="#谈谈-事件" class="headerlink" title="谈谈 事件"></a>谈谈 事件</h1><hr><p>最近在读红宝书，就是那本JavaScript高级程序设计。读到事件那一章，碰巧又看到一部分和事件有关的面试题，于是写下这篇文章当作自己的学习笔记。</p><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><hr><p>在没有阅读相关文章之前，我都一直以为一个元素的onclick就只是对应这个元素的点击事件。红宝书中提出的问题就是 当你单击了某个元素时，是否也点击了它的父元素呢？<br>当然，原文是用同心圆来做说明的。想象一张纸上有一组同心圆，当你把手放在圆心时，手指指向的不是一个圆，而是纸上所有的圆。<br>事件流描述的是从页面接受事件的顺序。<br>IE事件流是事件冒泡，即从最具体的元素，逐级向上传播。<br>NetScape提出的事件流是事件捕获，即从不太具体的元素到具体的元素。<br>而 DOM2级事件 规定的事件流包括三个阶段： 事件捕获阶段，处于目标阶段和事件冒泡阶段。</p><h3 id="事件代理，事件委托"><a href="#事件代理，事件委托" class="headerlink" title="事件代理，事件委托"></a>事件代理，事件委托</h3><hr><p>理解了事件流之后，其实就比较好理解事件代理。<br>什么是事件代理呢？举个例子，我们有一个5*5的table,我们要实现一个功能就是点击某个tablecell时，将里面的文本经过某些处理输出到控制台。如果不使用事件代理，那么我们很可能写一个循环，然后对每一个tablecell设置onclick。<br>这样当然可以，但是要知道添加到页面上的数据处理程序数量将直接影响到页面整体的性能。在循环里面为每个dom设置匿名函数显然是不可取的，这会消耗大量的内存。当然，你也可以提前写好一个通用的函数，再在循环中将函数绑定到相应的事件中。<br>但是多次dom访问操作也是极其消耗性能的，所以事件委托是一个较好的方案。<br>事件委托利用了事件冒泡，指定一个事件处理程序，就可以管理某一类型的所有事件。<br>比如之前的例子，我们就写一个通用的处理函数，然后让table去监听click事件，在table的事件监听器中处理函数。<br>而且使用事件委托之后，一旦你想要添加新的元素进去，它也能正常响应原先的事件。如果不用事件响应的话，添加dom之后，还得再次手动为这些dom添加事件处理程序。</p><h3 id="绑定事件的方式"><a href="#绑定事件的方式" class="headerlink" title="绑定事件的方式"></a>绑定事件的方式</h3><p>绑定事件有三种方式。<br>第一种是在html中进行事件绑定，即在html标签的onclick等等属性上绑定事件。这种方式会导致一个问题就是html代码和js代码紧密耦合，不利于维护。<br>第二种是 DOM0级事件处理程序，即在dom元素的expando属性上绑定。<br>如<br>    <code>var a = document.getElementById(&#39;app&#39;);    a.onclick = someFunction();</code><br>这种形式绑定事件不如DOM2级，因为容易导致事件相互覆盖。<br>第三种 是DOM2级事件处理程序,如<br><code>var btn = document.getElementById(&#39;myBtn&#39;);btn.addEventListener(&quot;click&quot;, function() {    alert(this.id);}, false);</code><br>最后一个参数建议尽量使用false，因为：<br>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。<br>同时，建议在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</p><h3 id="Some"><a href="#Some" class="headerlink" title="Some"></a>Some</h3><p><em>我们可以使用 event.preventDafault()方法阻止默认事件。如果想查看默认事件是否被阻止了，可以使用event.defaultPrevented属性查看。</em>如果需要阻止事件的传播，可以使用event.stopPropagation()方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;谈谈-事件&quot;&gt;&lt;a href=&quot;#谈谈-事件&quot; class=&quot;headerlink&quot; title=&quot;谈谈 事件&quot;&gt;&lt;/a&gt;谈谈 事件&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;最近在读红宝书，就是那本JavaScript高级程序设计。读到事件那一章，碰巧又看到一部分和事件有关的面试
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题</title>
    <link href="http://yoursite.com/2018/10/14/%E4%BB%8E%200.1%20+%200.2%20!==%200.3%20%E5%BC%80%E5%A7%8B%20%E8%B0%88%E8%B0%88JavaScript%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/14/从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题/</id>
    <published>2018-10-14T04:40:38.662Z</published>
    <updated>2018-10-14T04:52:55.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题"><a href="#从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题" class="headerlink" title="从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题"></a>从 0.1 + 0.2 !== 0.3 开始 谈谈JavaScript精度问题</h1><hr><p>还记得刚开始接触前端的时候，那时候第一次看到 0.1 + 0.2 !== 0.3 的时候还是比较惊讶的，但那时候的我一心只想学习一些新技术、新框架，只想快速上手，自动地把这些问题归为底层的问题，便抛之脑后了。等到再一次碰到类似的问题，已经是几个月后了。<br><br></p><h2 id="Number的存储"><a href="#Number的存储" class="headerlink" title="Number的存储"></a>Number的存储</h2><hr><p>在讨论为什么 0.1 + 0.2 !== 0.3 之前，我们先来看看数字在JS中是怎么存储的吧。<br>我们都知道在JS中数字只有一种数据类型就是 Number， 而 Number 实际上是一种双精度浮点数的数据类型，遵循<a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank" rel="noopener">(IEEE - 754)</a>标准 ，用64bit进行存储。<br><br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload.wikimedia.org/wikipedia/commons/7/76/General_double_precision_float.png" alt="双精度浮点数存储格式" title="">                </div>                <div class="image-caption">双精度浮点数存储格式</div>            </figure></p><p>从左往右依次为<br>sign bit(符号): 用来表示正负号</p><p>exponent(指数): 用来表示次方数</p><p>mantissa(尾数): 用来表示精确度</p><hr><p>在我不了解它的数字表示之前，我考虑的是mantissa表示尾数，那么小数点应该存放在哪里，怎么存放？<br>后来，我才明白，小数点不用存，你可以把它看成小数点在尾数mantissa的最左边，即52bit和51bit之间，为什么会这样呢？</p><blockquote><p>事实上，为了最大限度提高精确度，可以要求尾数规格化，把尾数处理到大于等于1而小于2的区间内，便可省去前述的“1”</p></blockquote><p>相当于尾数mantissa部分左侧多了一个“1.”还不用占用空间。<br>比如尾数mantissa中存了52个1<br>那么尾数mantissa实际表示的值（二进制）即为1.11…111(小数点后52个1)<br>$$ mantissa = 1.11…111 $$<br>转换成十进制即<br>$$ mantissa = 1+ (1/2)^1 + (1/2)^2 + … + (1/2)^{51} + (1/2)^{52}  $$</p><p>与此同时，我们正常理解指数部分应该为<br>$$ 2^{exponent} $$<br>exponent即为62bit到52位的正常二进制表示<br>但实际上我们的exponent 还有一个片偏移量<br>所以指数部分实际表示的值还要减去0x3ff<br>那么指数部分实际表示的值为<br>$$ 2^{exponent-0x3ff} $$</p><p><strong>那么这64bit实际表示的数字为</strong><br>$$ (-1)^{sign} \times 1.mantissa \times 2^{exponent-0x3ff} $$<br><br></p><h2 id="回到-0-1-0-2"><a href="#回到-0-1-0-2" class="headerlink" title="回到 0.1 + 0.2"></a>回到 0.1 + 0.2</h2><hr><p>那么回到 0.1 + 0.2 这个问题上，我们看看0.1和0.2实际存储情况是怎么样的。<br>我们先看0.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0.1 * 2 = 0.2    //0</span><br><span class="line">0.2 * 2 = 0.4    //0</span><br><span class="line">0.4 * 2 = 0.8    //0</span><br><span class="line">0.8 * 2 = 1.6    //1</span><br><span class="line">0.6 * 2 = 1.2    //1</span><br><span class="line">0.2 * 2 = 0.4    //0</span><br><span class="line">0.4 * 2 = 0.8    //0</span><br><span class="line">0.8 * 2 = 1.6    //1</span><br><span class="line">0.6 * 2 = 1.2    //1</span><br><span class="line">0.2 * 2 = 0.4    //0</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure></p><p>你可以看到它是乘不完的，0011这四个数在循环，即0.1转换成二进制是无限循环的。<br>但是要知道，我们的尾数部分只有52位，多的部分只能截掉。<br>也就是说十进制的0.1在存储为双精度浮点数的时候会造成精度丢失。</p><p><strong>而精度丢失丢失正是我们今天这个问题的原因所在</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 0.1 的存储形式</span><br><span class="line">0.00011001100110011001100110011001100110011001100110011010 </span><br><span class="line">// 0.2 的存储形式</span><br><span class="line">0.0011001100110011001100110011001100110011001100110011010 </span><br><span class="line">// 二进制相加的结果</span><br><span class="line">0.0100110011001100110011001100110011001100110011001100111</span><br><span class="line">// 转成十进制正好是 0.30000000000000004</span><br></pre></td></tr></table></figure></p><p><br></p><h2 id="其他语言的通病"><a href="#其他语言的通病" class="headerlink" title="其他语言的通病"></a>其他语言的通病</h2><hr><p>事实上，这不是JS才有的问题，毕竟Number类型是按照IEEE - 754标准的双精度浮点数实现的，这个问题在所有按照标准实现的语言中都有可能出现。</p><p>在我前一段时间写的项目中，我发现表格中一个金额显示为“30635.839999999997”，想了一会觉得应该是JavaScipt中Number丢失精度的问题。后来查看日志发现不是，而是Rails后端接口传过来的数据就是“30635.839999999997”，在后端进行double类型相加运算的时候，就已经出现了问题。<br>起码这已经能证明这个问题不是JavaScript的原因。</p><h2 id="解决问题案例"><a href="#解决问题案例" class="headerlink" title="解决问题案例"></a>解决问题案例</h2><hr><p>正如上面提到的那样，我之前的一个项目中，发现表格中一个金额显示为“30635.839999999997”，这个显示数据肯定不行的。发现之后，我一开始打算直接粗暴地给表格所有数据加上toFixed(2)完事，这样的修改是最不用动脑子的。<br>但是这样是行不通的，一个是我想要整数和一位小数只显示他们原来的样子。比如“500”就显示成“500”而不是”500.00”。另外toFixed()方法本身也有问题，不能正常地进行四舍五入。</p><p>这里我使用了他人的一个方法(链接位于文末)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数据展示类</span><br><span class="line">当你拿到 1.4000000000000001 这样的数据要展示时，建议使用 toPrecision 凑整并 parseFloat 转成数字后再显示，如下：</span><br><span class="line"></span><br><span class="line">parseFloat(1.4000000000000001.toPrecision(12)) === 1.4  // True</span><br><span class="line">封装成方法就是：</span><br><span class="line"></span><br><span class="line">function strip(num, precision = 12) &#123;</span><br><span class="line">  return +parseFloat(num.toPrecision(precision));</span><br><span class="line">&#125;</span><br><span class="line">为什么选择 12 做为默认精度？这是一个经验的选择，一般选12就能解决掉大部分0001和0009问题，而且大部分情况下也够用了，如果你需要更精确可以调高。</span><br></pre></td></tr></table></figure></p><p>我在js需要处理相关数据的地方中调用这个函数，大体是能解决这个问题的。</p><p>当然工作中碰到精度问题的情景不可能只有这一个，如果需要专业的解决方法，我们可以使用mathjs。</p><p>不管怎么样，理解了0.1 + 0.2 !== 0.3的原因，起码以后遇到类似问题，就能快速定位到原因所在。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><hr><p><a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8" target="_blank" rel="noopener">双精度浮点数 - 维基百科，自由的百科全书</a><br><a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener">JavaScript 浮点数陷阱及解法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题&quot;&gt;&lt;a href=&quot;#从-0-1-0-2-0-3-开始-谈谈JavaScript精度问题&quot; class=&quot;headerlink&quot; title=&quot;从 0.1 + 0.2 !== 0.3 开始 谈谈J
      
    
    </summary>
    
    
  </entry>
  
</feed>
